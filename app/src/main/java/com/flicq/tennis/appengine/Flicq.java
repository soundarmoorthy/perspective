/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2015-01-14 17:53:03 UTC)
 * on 2015-03-23 at 19:42:44 UTC 
 * Modify at your own risk.
 */

package com.flicq.tennis.appengine;

public class Flicq extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.20.0 of the flicq library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://flicq-thurst-4711.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "flicq/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Flicq(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Flicq(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * An accessor for creating requests from the FlicqEndpointService collection.
   *
   * <p>The typical use is:</p>
   * <pre>
   *   {@code Flicq flicq = new Flicq(...);}
   *   {@code Flicq.FlicqEndpointService.List request = flicq.flicqEndpointService().list(parameters ...)}
   * </pre>
   *
   * @return the resource collection
   */
  public FlicqEndpointService flicqEndpointService() {
    return new FlicqEndpointService();
  }

  /**
   * The "FlicqEndpointService" collection of methods.
   */
  public class FlicqEndpointService {

    /**
     * An accessor for creating requests from the EmailSubscriber collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Flicq flicq = new Flicq(...);}
     *   {@code Flicq.EmailSubscriber.List request = flicq.emailSubscriber().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public EmailSubscriber emailSubscriber() {
      return new EmailSubscriber();
    }

    /**
     * The "EmailSubscriber" collection of methods.
     */
    public class EmailSubscriber {

      /**
       * Show subscribers
       *
       * Create a request for the method "EmailSubscriber.ShowAll".
       *
       * This request holds the parameters needed by the flicq server.  After setting any optional
       * parameters, call the {@link ShowAll#execute()} method to invoke the remote operation.
       *
       * @return the request
       */
      public ShowAll showAll() throws java.io.IOException {
        ShowAll result = new ShowAll();
        initialize(result);
        return result;
      }

      public class ShowAll extends FlicqRequest<com.flicq.tennis.appengine.model.Subscribers> {

        private static final String REST_PATH = "email";

        /**
         * Show subscribers
         *
         * Create a request for the method "EmailSubscriber.ShowAll".
         *
         * This request holds the parameters needed by the the flicq server.  After setting any optional
         * parameters, call the {@link ShowAll#execute()} method to invoke the remote operation. <p>
         * {@link
         * ShowAll#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @since 1.13
         */
        protected ShowAll() {
          super(Flicq.this, "GET", REST_PATH, null, com.appspot.flicq_thurst_4711.flicq.model.Subscribers.class);
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public ShowAll setAlt(java.lang.String alt) {
          return (ShowAll) super.setAlt(alt);
        }

        @Override
        public ShowAll setFields(java.lang.String fields) {
          return (ShowAll) super.setFields(fields);
        }

        @Override
        public ShowAll setKey(java.lang.String key) {
          return (ShowAll) super.setKey(key);
        }

        @Override
        public ShowAll setOauthToken(java.lang.String oauthToken) {
          return (ShowAll) super.setOauthToken(oauthToken);
        }

        @Override
        public ShowAll setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (ShowAll) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public ShowAll setQuotaUser(java.lang.String quotaUser) {
          return (ShowAll) super.setQuotaUser(quotaUser);
        }

        @Override
        public ShowAll setUserIp(java.lang.String userIp) {
          return (ShowAll) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Integer limit;

        /**
       [ default: 10]
       [

         */
        public java.lang.Integer getLimit() {
          return limit;
        }

        public ShowAll setLimit(java.lang.Integer limit) {
          this.limit = limit;
          return this;
        }

        @Override
        public ShowAll set(String parameterName, Object value) {
          return (ShowAll) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Shots collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Flicq flicq = new Flicq(...);}
     *   {@code Flicq.Shots.List request = flicq.shots().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Shots shots() {
      return new Shots();
    }

    /**
     * The "Shots" collection of methods.
     */
    public class Shots {

      /**
       * Add a shot
       *
       * Create a request for the method "Shots.Add".
       *
       * This request holds the parameters needed by the flicq server.  After setting any optional
       * parameters, call the {@link Add#execute()} method to invoke the remote operation.
       *
       * @param content the {@link com.appspot.flicq_thurst_4711.flicq.model.Shot}
       * @return the request
       */
      public Add add(com.flicq.tennis.appengine.model.Shot content) throws java.io.IOException {
        Add result = new Add(content);
        initialize(result);
        return result;
      }

      public class Add extends FlicqRequest<Void> {

        private static final String REST_PATH = "shots";

        /**
         * Add a shot
         *
         * Create a request for the method "Shots.Add".
         *
         * This request holds the parameters needed by the the flicq server.  After setting any optional
         * parameters, call the {@link Add#execute()} method to invoke the remote operation. <p> {@link
         * Add#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param content the {@link com.flicq.tennis.appengine.model.Shot}
         * @since 1.13
         */
        protected Add(com.flicq.tennis.appengine.model.Shot content) {
          super(Flicq.this, "PUT", REST_PATH, content, Void.class);
        }

        @Override
        public Add setAlt(java.lang.String alt) {
          return (Add) super.setAlt(alt);
        }

        @Override
        public Add setFields(java.lang.String fields) {
          return (Add) super.setFields(fields);
        }

        @Override
        public Add setKey(java.lang.String key) {
          return (Add) super.setKey(key);
        }

        @Override
        public Add setOauthToken(java.lang.String oauthToken) {
          return (Add) super.setOauthToken(oauthToken);
        }

        @Override
        public Add setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Add) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Add setQuotaUser(java.lang.String quotaUser) {
          return (Add) super.setQuotaUser(quotaUser);
        }

        @Override
        public Add setUserIp(java.lang.String userIp) {
          return (Add) super.setUserIp(userIp);
        }

        @Override
        public Add set(String parameterName, Object value) {
          return (Add) super.set(parameterName, value);
        }
      }
      /**
       * Create a shot info with random data
       *
       * Create a request for the method "Shots.Create".
       *
       * This request holds the parameters needed by the flicq server.  After setting any optional
       * parameters, call the {@link Create#execute()} method to invoke the remote operation.
       *
       * @return the request
       */
      public Create create() throws java.io.IOException {
        Create result = new Create();
        initialize(result);
        return result;
      }

      public class Create extends FlicqRequest<Void> {

        private static final String REST_PATH = "shots";

        /**
         * Create a shot info with random data
         *
         * Create a request for the method "Shots.Create".
         *
         * This request holds the parameters needed by the the flicq server.  After setting any optional
         * parameters, call the {@link Create#execute()} method to invoke the remote operation. <p> {@link
         * Create#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
         * be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @since 1.13
         */
        protected Create() {
          super(Flicq.this, "POST", REST_PATH, null, Void.class);
        }

        @Override
        public Create setAlt(java.lang.String alt) {
          return (Create) super.setAlt(alt);
        }

        @Override
        public Create setFields(java.lang.String fields) {
          return (Create) super.setFields(fields);
        }

        @Override
        public Create setKey(java.lang.String key) {
          return (Create) super.setKey(key);
        }

        @Override
        public Create setOauthToken(java.lang.String oauthToken) {
          return (Create) super.setOauthToken(oauthToken);
        }

        @Override
        public Create setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Create) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Create setQuotaUser(java.lang.String quotaUser) {
          return (Create) super.setQuotaUser(quotaUser);
        }

        @Override
        public Create setUserIp(java.lang.String userIp) {
          return (Create) super.setUserIp(userIp);
        }

        @Override
        public Create set(String parameterName, Object value) {
          return (Create) super.set(parameterName, value);
        }
      }
      /**
       * List all the shots
       *
       * Create a request for the method "Shots.List".
       *
       * This request holds the parameters needed by the flicq server.  After setting any optional
       * parameters, call the {@link List#execute()} method to invoke the remote operation.
       *
       * @return the request
       */
      public List list() throws java.io.IOException {
        List result = new List();
        initialize(result);
        return result;
      }

      public class List extends FlicqRequest<com.flicq.tennis.appengine.model.Shots> {

        private static final String REST_PATH = "shots";

        /**
         * List all the shots
         *
         * Create a request for the method "Shots.List".
         *
         * This request holds the parameters needed by the the flicq server.  After setting any optional
         * parameters, call the {@link List#execute()} method to invoke the remote operation. <p> {@link
         * List#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must be
         * called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @since 1.13
         */
        protected List() {
          super(Flicq.this, "GET", REST_PATH, null, com.appspot.flicq_thurst_4711.flicq.model.Shots.class);
        }

        @Override
        public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
          return super.executeUsingHead();
        }

        @Override
        public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
          return super.buildHttpRequestUsingHead();
        }

        @Override
        public List setAlt(java.lang.String alt) {
          return (List) super.setAlt(alt);
        }

        @Override
        public List setFields(java.lang.String fields) {
          return (List) super.setFields(fields);
        }

        @Override
        public List setKey(java.lang.String key) {
          return (List) super.setKey(key);
        }

        @Override
        public List setOauthToken(java.lang.String oauthToken) {
          return (List) super.setOauthToken(oauthToken);
        }

        @Override
        public List setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (List) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public List setQuotaUser(java.lang.String quotaUser) {
          return (List) super.setQuotaUser(quotaUser);
        }

        @Override
        public List setUserIp(java.lang.String userIp) {
          return (List) super.setUserIp(userIp);
        }

        @com.google.api.client.util.Key
        private java.lang.Integer limit;

        /**
       [ default: 10]
       [

         */
        public java.lang.Integer getLimit() {
          return limit;
        }

        public List setLimit(java.lang.Integer limit) {
          this.limit = limit;
          return this;
        }

        @Override
        public List set(String parameterName, Object value) {
          return (List) super.set(parameterName, value);
        }
      }

    }
    /**
     * An accessor for creating requests from the Subscriber collection.
     *
     * <p>The typical use is:</p>
     * <pre>
     *   {@code Flicq flicq = new Flicq(...);}
     *   {@code Flicq.Subscriber.List request = flicq.subscriber().list(parameters ...)}
     * </pre>
     *
     * @return the resource collection
     */
    public Subscriber subscriber() {
      return new Subscriber();
    }

    /**
     * The "Subscriber" collection of methods.
     */
    public class Subscriber {

      /**
       * Add a subscriber to our list
       *
       * Create a request for the method "Subscriber.Subscribe".
       *
       * This request holds the parameters needed by the flicq server.  After setting any optional
       * parameters, call the {@link Subscribe#execute()} method to invoke the remote operation.
       *
       * @param content the {@link com.appspot.flicq_thurst_4711.flicq.model.Subscriber}
       * @return the request
       */
      public Subscribe subscribe(com.flicq.tennis.appengine.model.Subscriber content) throws java.io.IOException {
        Subscribe result = new Subscribe(content);
        initialize(result);
        return result;
      }

      public class Subscribe extends FlicqRequest<Void> {

        private static final String REST_PATH = "email";

        /**
         * Add a subscriber to our list
         *
         * Create a request for the method "Subscriber.Subscribe".
         *
         * This request holds the parameters needed by the the flicq server.  After setting any optional
         * parameters, call the {@link Subscribe#execute()} method to invoke the remote operation. <p>
         * {@link
         * Subscribe#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
         * must be called to initialize this instance immediately after invoking the constructor. </p>
         *
         * @param content the {@link com.appspot.flicq_thurst_4711.flicq.model.Subscriber}
         * @since 1.13
         */
        protected Subscribe(com.flicq.tennis.appengine.model.Subscriber content) {
          super(Flicq.this, "PUT", REST_PATH, content, Void.class);
        }

        @Override
        public Subscribe setAlt(java.lang.String alt) {
          return (Subscribe) super.setAlt(alt);
        }

        @Override
        public Subscribe setFields(java.lang.String fields) {
          return (Subscribe) super.setFields(fields);
        }

        @Override
        public Subscribe setKey(java.lang.String key) {
          return (Subscribe) super.setKey(key);
        }

        @Override
        public Subscribe setOauthToken(java.lang.String oauthToken) {
          return (Subscribe) super.setOauthToken(oauthToken);
        }

        @Override
        public Subscribe setPrettyPrint(java.lang.Boolean prettyPrint) {
          return (Subscribe) super.setPrettyPrint(prettyPrint);
        }

        @Override
        public Subscribe setQuotaUser(java.lang.String quotaUser) {
          return (Subscribe) super.setQuotaUser(quotaUser);
        }

        @Override
        public Subscribe setUserIp(java.lang.String userIp) {
          return (Subscribe) super.setUserIp(userIp);
        }

        @Override
        public Subscribe set(String parameterName, Object value) {
          return (Subscribe) super.set(parameterName, value);
        }
      }

    }
  }

  /**
   * Builder for {@link Flicq}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Flicq}. */
    @Override
    public Flicq build() {
      return new Flicq(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link FlicqRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setFlicqRequestInitializer(
        FlicqRequestInitializer flicqRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(flicqRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
